@use "sass:math";

.waves {
    position: relative;
    width: 100vw;
    min-height: 50px;
    max-height: 150px;
    transform-origin: bottom center;
}

.content {
    position: relative;
    height: 20vh;
    text-align: center;
    background-color: #9c4e00;
}

/* Animation */
/* https://codepen.io/goodkatz/pen/LYPGxQz?editors=1100 */
@media (min-width: 769px) {
    .parallax > use {
        animation: move-forever 5s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;
    }
    .parallax > use:nth-child(1) {
        animation-delay: -1s;
        animation-duration: 3s;
    }
    .parallax > use:nth-child(2) {
        animation-delay: -2s;
        animation-duration: 4s;
    }
    .parallax > use:nth-child(3) {
        animation-delay: -3s;
        animation-duration: 5s;
    }
    .parallax > use:nth-child(4) {
        animation-delay: -4s;
        animation-duration: 6s;
    }
}

@keyframes move-forever {
    0% {
        transform: translate3d(-90px, 0, 0);
    }
    100% {
        transform: translate3d(85px, 0, 0);
    }
}
@media (max-width: 768px) {
    .parallax > use {
        animation: move-forever 3s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;
    }
    .parallax > use:nth-child(1) {
        animation-delay: -0.5s;
        animation-duration: 1.5s;
    }
    .parallax > use:nth-child(2) {
        animation-delay: -1s;
        animation-duration: 2s;
    }
    .parallax > use:nth-child(3) {
        animation-delay: -2s;
        animation-duration: 2.5s;
    }
}

.safeBottom {
    bottom: env(safe-area-inset-bottom);
}

@function strip-unit($number) {
    @if type-of($number) == "number" and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}

@function getMaxFillHeight() {
    $safeArea: env(safe-area-inset-bottom, 0px);
    @if max($safeArea, 0) != 0 {
        @return 75vh;
    } @else {
        @return 80vh;
    }
}

.maxFillTop {
    bottom: getMaxFillHeight();
}
